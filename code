"""
Sistema de Lombada Eletr√¥nica com Interface Gr√°fica
---------------------------------------------------
Este programa simula o funcionamento de um radar de lombada eletr√¥nica.
O usu√°rio insere a velocidade registrada de um ve√≠culo e o sistema:
- Verifica se a velocidade est√° acima do limite permitido (com toler√¢ncia de 10%)
- Classifica o tipo de infra√ß√£o: m√©dia, grave ou grav√≠ssima
- Gera dados fict√≠cios do ve√≠culo para simular uma notifica√ß√£o oficial
- Exibe os detalhes da infra√ß√£o e do ve√≠culo

Ideal para simula√ß√µes, testes educativos ou demonstra√ß√µes.
"""

# Importa a biblioteca tkinter para criar a interface gr√°fica
import tkinter as tk
from tkinter import messagebox

# Importa a biblioteca random para gerar dados aleat√≥rios
import random

# Dicion√°rios e listas com dados fict√≠cios para simula√ß√£o
modelos = {
    'carro': ['Fiat Uno', 'Chevrolet Onix', 'Volkswagen Gol', 'Hyundai HB20'],
    'moto': ['Honda CG 160', 'Yamaha Fazer 250', 'Honda Biz', 'Kawasaki Ninja'],
    'caminhao': ['Volkswagen Constellation', 'Scania R440', 'Mercedes-Benz Atego']
}
cores = ['preto', 'branco', 'prata', 'vermelho', 'azul', 'cinza']
tipos = ['carro', 'moto', 'caminhao']

# Classe principal do sistema
class SistemaLombada:
    def __init__(self, root):
        # Inicializa a janela principal
        self.root = root
        self.root.title("Sistema de Lombada Eletr√¥nica")
        self.root.geometry("500x500")  # Define o tamanho da janela

        # Cria um frame (container) para agrupar os elementos
        self.frame = tk.Frame(root)
        self.frame.pack(pady=20)

        # T√≠tulo do sistema
        self.label_intro = tk.Label(self.frame, text="SISTEMA DE LOMBADA ELETR√îNICA", font=("Helvetica", 16, "bold"))
        self.label_intro.pack(pady=10)

        # Instru√ß√£o para o usu√°rio
        self.label_info = tk.Label(self.frame, text="Insira a velocidade registrada do ve√≠culo (em km/h):")
        self.label_info.pack(pady=5)

        # Campo de entrada de velocidade
        self.entry_velocidade = tk.Entry(self.frame, font=("Helvetica", 14))
        self.entry_velocidade.pack(pady=5)

        # Bot√£o que aciona a verifica√ß√£o
        self.btn_verificar = tk.Button(self.frame, text="Verificar", command=self.verificar)
        self.btn_verificar.pack(pady=10)

        # √Årea de texto para mostrar os resultados
        self.text_resultado = tk.Text(self.frame, width=60, height=20, font=("Courier", 10))
        self.text_resultado.pack()

    # Fun√ß√£o que verifica a velocidade inserida
    def verificar(self):
        # Limpa o conte√∫do anterior da √°rea de texto
        self.text_resultado.delete('1.0', tk.END)

        try:
            # Converte o valor inserido para n√∫mero decimal, aceitando "," ou "."
            velocidade = float(self.entry_velocidade.get().replace(",", "."))

            # Gera aleatoriamente os dados do ve√≠culo
            tipo_veiculo = random.choice(tipos)
            modelo = random.choice(modelos[tipo_veiculo])
            cor = random.choice(cores)
            ano = random.randint(2015, 2023)
            # Placa no formato AAA-1234
            placa = f"{chr(random.randint(65,90))}{chr(random.randint(65,90))}{chr(random.randint(65,90))}-{random.randint(1000,9999)}"

            # Define o limite da via e a margem de toler√¢ncia (10%)
            limite = 80
            margem = limite * 0.10
            tolerancia = limite + margem

            self.text_resultado.insert(tk.END, f"‚û°Ô∏è  Limite da via: {limite} km/h (+10% = {tolerancia:.1f} km/h)\n")

            # Verifica se est√° dentro do limite com toler√¢ncia
            if velocidade <= tolerancia:
                self.text_resultado.insert(tk.END, "‚úÖ Dentro da velocidade permitida. Nenhuma infra√ß√£o registrada.\n")
            else:
                # Calcula o excesso de velocidade
                excesso = velocidade - limite
                percentual = (excesso / limite) * 100

                # Define o tipo de infra√ß√£o com base no percentual
                if percentual <= 20:
                    multa = 193.50
                    pontos = 4
                    mensagem = "Infra√ß√£o m√©dia: at√© 20% acima do limite."
                elif percentual <= 50:
                    multa = 478.50
                    pontos = 5
                    mensagem = "Infra√ß√£o grave: entre 20% e 50% acima do limite."
                else:
                    multa = 1461.10
                    pontos = "Suspens√£o imediata da CNH"
                    mensagem = "Infra√ß√£o grav√≠ssima: mais de 50% acima do limite."

                # Exibe os dados da infra√ß√£o na tela
                self.text_resultado.insert(tk.END, "\nüö® INFRA√á√ÉO DETECTADA!\n")
                self.text_resultado.insert(tk.END, f"{mensagem}\n")
                self.text_resultado.insert(tk.END, f"Multa: R${multa:.2f}\n")
                self.text_resultado.insert(tk.END, f"Pontos: {pontos}\n")

                # Simula a notifica√ß√£o que seria enviada ao propriet√°rio
                self.text_resultado.insert(tk.END, "\n=== NOTIFICA√á√ÉO DE INFRA√á√ÉO ===\n")
                self.text_resultado.insert(tk.END, f"Ve√≠culo: {modelo.upper()} ({tipo_veiculo})\n")
                self.text_resultado.insert(tk.END, f"Cor: {cor.capitalize()} | Ano/Modelo: {ano}/{ano+1}\n")
                self.text_resultado.insert(tk.END, f"Placa: {placa}\n")
                self.text_resultado.insert(tk.END, f"Velocidade registrada: {velocidade:.1f} km/h\n")
                self.text_resultado.insert(tk.END, f"Velocidade permitida (com toler√¢ncia): at√© {tolerancia:.1f} km/h\n")
                self.text_resultado.insert(tk.END, f"Infra√ß√£o: {mensagem}\n")
                self.text_resultado.insert(tk.END, f"Valor da multa: R${multa:.2f}\n")
                self.text_resultado.insert(tk.END, f"Pontos na CNH: {pontos}\n")
                self.text_resultado.insert(tk.END, "Esta notifica√ß√£o ser√° enviada ao propriet√°rio do ve√≠culo.\n")

        # Caso o valor inserido n√£o seja v√°lido
        except ValueError:
            messagebox.showerror("Erro", "Por favor, insira uma velocidade v√°lida (ex: 85 ou 90.5).")

# Executa o sistema se o arquivo for rodado diretamente
if __name__ == "__main__":
    root = tk.Tk()  # Cria a janela principal
    app = SistemaLombada(root)  # Inicializa a aplica√ß√£o
    root.mainloop()  # Inicia o loop da interface gr√°fica
